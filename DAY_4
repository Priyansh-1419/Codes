

Subqueries 
1.	Create a query to display the Customer Name and Date of Birth of all the Customers who are younger than Customer ‘David’ 

ANS - 
SELECT FIRST_NAME,DATE_OF_BIRTH 
FROM LMS_CUSTOMER_M_ARBAZ211  
WHERE DATE_OF_BIRTH>(SELECT DATE_OF_BIRTH FROM LMS_CUSTOMER_M_ARBAZ211 WHERE  FIRST_NAME='DAVID')  

2.	Find out all the Customers who have more than 1 loan. Return Customer name and number of loans. 

ANS – 
SELECT cust.FIRST_NAME, COUNTLOAN AS "NUMBER OF LOANS" 
FROM( SELECT COUNT(AGREEMENT_ID) AS COUNTLOAN,LESSEE_ID 
FROM LMS_AGREEMENT_DTL_ARBAZ21  GROUP BY LESSEE_ID ) 
JOIN LMS_CUSTOMER_M_ARBAZ211 cust ON CUSTOMER_ID=LESSEE_ID 
WHERE COUNTLOAN>1;
 
3.	Find out all the customers who have more than 1 loan of tenure greater than 5 years and repayment frequency is Quarterly. Return Customer Name, Product Name, Loan Disbursal Date and Loan Amount. 

ANS – 
SELECT cust.CUSTOMER_ID, cust.fIRST_NAME,cust.LAST_NAME,GENDER ,
cust.DATE_OF_BIRTH,cust.CONTACT_NUMBER,cust.PROFESSION FROM(
SELECT LESSEE_ID,COUNT(AGREEMENT_ID) TENURECOUNT
FROM LMS_AGREEMENT_DTL_ARBAZ21
WHERE TENURE>5 AND Repayment_Frequency='Q'
GROUP BY LESSEE_ID ) JOIN LMS_CUSTOMER_M_ARBAZ211 cust
ON cust.CUSTOMER_ID=LESSEE_ID WHERE TENURECOUNT>1;
 
4.	Write a query to display the customer id, customer first name of all customers whose designation is same as any customer whose last name contains a ‘U’ 

ANS – 



SELECT CUSTOMER_ID,FIRST_NAME FROM LMS_CUSTOMER_M_ARBAZ211 
WHERE DESIGNATION_PROFESSION=ANY(SELECT DESIGNATION_PROFESSION
FROM LMS_CUSTOMER_M_ARBAZ211 WHERE LAST_NAME LIKE '%u%');
 
5.	Write a query to fetch all the loan details whose disbursal date is greater than the disbursal date of the loans being taken by a Customer ‘David’ 

ANS – 
SELECT * FROM LMS_AGREEMENT_DTL_ARBAZ21 WHERE
LOAN_DISBURSAL_DATE>(SELECT A.LOAN_DISBURSAL_DATE FROM 
LMS_CUSTOMER_M_ARBAZ211 cust JOIN LMS_AGREEMENT_DTL_ARBAZ21 A
ON cust.CUSTOMER_ID=A.LESSEE_ID AND cust.FIRST_NAME='DAVID');
 
6.	Write a query to fetch all the loan details whose loan amount is greater than the average of loan amounts being disbursed till date sorted descending 

ANS – 
SELECT * FROM LMS_AGREEMENT_DTL_ARBAZ21 WHERE LOAN_AMOUNT>(SELECT 
AVG(LOAN_AMOUNT) FROM LMS_AGREEMENT_DTL_ARBAZ21
WHERE LOAN_DISBURSAL_DATE<(SELECT CURRENT_DATE FROM DUAL))
ORDER BY LOAN_DISBURSAL_DATE DESC;
 
7.	Write a query to find all the customers who took all products (all loan types available) 

ANS –
SELECT * FROM LMS_CUSTOMER_M_ARBAZ211 cust JOIN (SELECT LESSEE_ID
FROM LMS_AGREEMENT_DTL_ARBAZ21 A JOIN LMS_PRODUCT_M_ARBAZ211 pro
ON pro.PRODUCT_CODE=A.PRODUCT_CODE WHERE pro.PRODUCT_CATEGORY
=ALL(SELECT CATEGORY_ID FROM LMS_PRODUCT_CATEGORY_M_ARBAZ211)
GROUP BY A.LESSEE_ID) ON cust.CUSTOMER_ID=LESSEE_ID;
 
8.	Write a query to fetch those loans where loan amount exceeds everyone’s credit limit 

ANS - 
SELECT *FROM LMS_AGREEMENT_DTL_ARBAZ21 WHERE LOAN_AMOUNT>ALL(
SELECT Monthly_Income*12*0.30 FROM LMS_CUSTOMER_M_ARBAZ211 ); 

9.	Write a query to fetch those customers whose monthly expenses are greater than average monthly expenses of all customers 






ANS - 
SELECT *FROM LMS_CUSTOMER_M_ARBAZ211 WHERE TOTAL_MONTHLY_EXPENSE>(
SELECT AVG(TOTAL_Monthly_EXPENSE) FROM LMS_CUSTOMER_M_ARBAZ211 );
 
10.	Write a query to find out those customers who have paid the least penalty charges on the installments 

ANS – 
SELECT * FROM LMS_CUSTOMER_M_ARBAZ211 WHERE CUSTOMER_ID=(SELECT
LESSEE_ID FROM( SELECT A.LESSEE_ID LESSEE_ID,SUM(repay.PENALTY_CHARGES)
PENALSUM FROM LMS_AGREEMENT_DTL_ARBAZ21 A JOIN 
LMS_REPAYSCH_DTL_ARBAZ21 repay ON repay.AGREEMENT_ID=A.AGREEMENT_ID
GROUP BY A.LESSEE_ID) WHERE PENALSUM=(SELECT MIN(PENALSUM) FROM(
SELECT SUM(repay.PENALTY_CHARGES) PENALSUM FROM 
LMS_AGREEMENT_DTL_ARBAZ21 A JOIN LMS_REPAYSCH_DTL_ARBAZ21 repay
ON repay.AGREEMENT_ID=A.AGREEMENT_ID GROUP BY A.LESSEE_ID )))
 
Views 
1.	Create a view on LMS_CHEQUE_DTL table based on Cheque_num, deposit_date, cheque_amount, payment_mode and status. Change the column names to ‘Cheque 
Number’, ‘Date’, ‘Amount’, and ‘Mode’ respectively. Name the view as ChequeDetails_VU. 

ANS – 
CREATE VIEW ChequeDetails_VU_ARBAAZ211 AS
SELECT  CHEQUE_NUM "CHEQUE NUMBER"  ,DEPOSIT_DATE "DATE",
 CHEQUE_AMOUNT AMOUNT,  PAYMENT_MODE "MODE", STATUS 
FROM  LMS_CHEQUE_DTL_ARBAZ211;
 
2.	Confirm that the view works. Display only the Cheque number and Date from the above view 

ANS – 
SELECT "CHEQUE NUMBER","DATE" FROM ChequeDetails_VU_ARBAAZ211
 
3.	Create a view which take care of all the Loan Agreements of HOME LOAN Type only. Name the view as HOME_LOAN_VU. Confirm that the view works. 

ANS –
CREATE VIEW HOME_LOAN_VU_ARBAZ211 AS SELECT  * FROM
 LMS_AGREEMENT_DTL_ARBAZ21  WHERE AGREEMENT_ID=ANY(
 SELECT A.AGREEMENT_ID  FROM LMS_AGREEMENT_DTL_ARBAZ21 A
 JOIN LMS_PRODUCT_M_ARBAZ211 pro  ON A.PRODUCT_CODE=pro.PRODUCT_CODE
 WHERE pro.PRODUCT_NAME LIKE '%HOME'  );
 
4.	Create a view which displays all the Loans being taken by the Customers. The view contains Customer Name, Product Name, Loan Amount, Disbursal Date and instalment amount. Customer name should contain both First name and last name. 

ANS – 
CREATE VIEW HOME_LOAN_VU_ARBAZ211_2 AS  SELECT 
 cust.FIRST_NAME||' '||cust.LAST_NAME "CUSTOMER NAME",  pro.PRODUCT_NAME 
"PRODUCT NAME", A.LOAN_AMOUNT "LOAN_AMOUNT",  A.LOAN_DISBURSAL_DATE 
"DISBURSAL DATE",  repay.INSTALLMENT_AMOUNT "INSTALLMENT_AMOUNT"
 FROM LMS_AGREEMENT_DTL_ARBAZ21 A  JOIN LMS_PRODUCT_M_ARBAZ211 pro
 ON A.PRODUCT_CODE=pro.PRODUCT_CODE  JOIN LMS_CUSTOMER_M_ARBAZ211 cust
 ON A.LESSEE_ID=cust.CUSTOMER_ID  JOIN LMS_REPAYSCH_DTL_ARBAZ21 repay
 ON repay.AGREEMENT_ID=A.AGREEMENT_ID ;
 
5.	Confirm that the view works 

ANS – 

 
 
6.	Create a view based on Customer name and count of all the loans being taken by the Customer whose repayment frequency is Monthly. 

ANS – 
CREATE VIEW HOME_LOAN_VU_ARBAZ211_3 AS SELECT 
cust.FIRST_NAME||' '||cust.LAST_NAME "CUSTOMER NAME", "ALL LOANS BY 
CUSTOMER" FROM LMS_CUSTOMER_M_ARBAZ211 cust JOIN
( SELECT LESSEE_ID, COUNT(AGREEMENT_ID) "ALL LOANS BY CUSTOMER"
FROM LMS_AGREEMENT_DTL_ARBAZ21 WHERE REPAYMENT_FREQUENCY='M'
GROUP BY LESSEE_ID) sq ON cust.CUSTOMER_ID = sq.LESSEE_ID;

 
7.	Confirm that the view works. 

ANS –

 

 
8.	Create a view based on Product Name, sum of total pending instalments sorted descending. 

ANS -
CREATE VIEW HOME_LOAN_VU_ARBAZ211_4 AS  SELECT pro.PRODUCT_NAME,
SUM(repay.INSTALLMENT_AMOUNT) "TOTAL PENDING INSTALLMENTS " FROM
LMS_PRODUCT_M_ARBAZ211 pro JOIN LMS_AGREEMENT_DTL_ARBAZ21 A
ON pro.PRODUCT_CODE = A.PRODUCT_CODE JOIN LMS_REPAYSCH_DTL_ARBAZ21 repay
ON repay.AGREEMENT_ID=A.AGREEMENT_ID WHERE INSTALLMENT_DUE_DATE<(SELECT CURRENT_DATE FROM DUAL) GROUP BY PRODUCT_NAME ORDER BY "TOTAL PENDING INSTALLMENTS " DESC;

9.	Create a view based on Customer Name, Gender, Contact number, Profession, Monthly income and monthly expense.  

ANS – 




CREATE VIEW HOME_LOAN_VU_ARBAZ211_5 AS SELECT FIRST_NAME||' '||LAST_NAME "CUSTOMER NAME", GENDER, CONTACT_NUMBER, PROFESSION , MONTHLY_INCOME INCOME, TOTAL_MONTHLY_EXPENSE "MONTHLY EXPENSE" FROM LMS_CUSTOMER_M_ARBAZ211; 

10.	Check whether the above view is updatable or not. If not, why? 

ANS – 
CREATE OR REPLACE VIEW HOME_LOAN_VU_ARBAZ211_6 AS SELECT  
FIRST_NAME||' '||LAST_NAME "CUSTOMER NAME", GENDER "GENDER IS",
CONTACT_NUMBER "PHONE NUMBER", PROFESSION "WORK PROFESSION",
MONTHLY_INCOME INCOME, TOTAL_MONTHLY_EXPENSE "MONTHLY EXPENSE"
FROM LMS_CUSTOMER_M_ARBAZ211;

ACTUALLY, WHAT HAPPENS WTH “VIEWS” IS THAT, WE CAN’T MODIFY OR UPDATE THE 
CREATED TABLE BUT WE ARE




DAY-4

-- Subqueries 
/* QS.1 Create a query to display the Customer Name and Date of Birth of all the Customers who are 
younger than Customer ‘David’ */

SELECT FIRST_NAME,DATE_OF_BIRTH 
FROM LMS_CUSTOMER_M_16911  
WHERE DATE_OF_BIRTH > (SELECT DATE_OF_BIRTH FROM LMS_CUSTOMER_M_16911 WHERE  FIRST_NAME='Rekha'); 

-- QS.2 Find out all the Customers who have more than 1 loan. Return Customer name and number of loans.

SELECT cust.FIRST_NAME, COUNTLOAN AS "NUMBER_OF_LOANS" 
FROM (SELECT COUNT(AGREEMENT_ID) AS COUNTLOAN,LESSEE_ID 
FROM LMS_AGREEMENT_DTL_16911  GROUP BY LESSEE_ID ) 
JOIN LMS_CUSTOMER_M_16911 cust ON CUSTOMER_ID = LESSEE_ID 
WHERE COUNTLOAN > 1;
 
 /* QS.3 Find out all the customers who have more than 1 loan of tenure greater than 5 years and 
repayment frequency is Quarterly. Return Customer Name, Product Name, Loan Disbursal 
Date and Loan Amount.
*/
SELECT cust.CUSTOMER_ID, cust.fIRST_NAME,cust.LAST_NAME,GENDER ,
cust.DATE_OF_BIRTH,cust.CONTACT_NUMBER,cust.PROFESSION FROM(
SELECT LESSEE_ID,COUNT(AGREEMENT_ID) TENURECOUNT
FROM LMS_AGREEMENT_DTL_16911
WHERE TENURE > 5 AND Repayment_Frequency='Q'
GROUP BY LESSEE_ID ) JOIN LMS_CUSTOMER_M_16911 cust
ON cust.CUSTOMER_ID=LESSEE_ID WHERE TENURECOUNT>1;
 
/* QS.4 Write a query to display the customer id, customer first name of all customers whose 
designation is same as any customer whose last name contains a ‘U’*/

SELECT CUSTOMER_ID,FIRST_NAME FROM LMS_CUSTOMER_M_16911 
WHERE DESIGNATION = ANY(SELECT DESIGNATION
FROM LMS_CUSTOMER_M_16911 WHERE LAST_NAME LIKE '%u%');
 
/* QS.5 Write a query to fetch all the loan details whose disbursal date is greater than the disbursal 
date of the loans being taken by a Customer ‘David’*/

SELECT * FROM LMS_AGREEMENT_DTL_16911 WHERE
LOAN_DISBURSAL_DATE>(SELECT A.LOAN_DISBURSAL_DATE FROM 
LMS_CUSTOMER_M_16911 cust JOIN LMS_AGREEMENT_DTL_16911 A
ON cust.CUSTOMER_ID=A.LESSEE_ID AND cust.FIRST_NAME='DAVID');
 
/* QS.6 Write a query to fetch all the loan details whose loan amount is greater than the average of 
loan amounts being disbursed till date sorted descending*/

SELECT * FROM LMS_AGREEMENT_DTL_16911 WHERE LOAN_AMOUNT>(SELECT 
AVG(LOAN_AMOUNT) FROM LMS_AGREEMENT_DTL_16911
WHERE LOAN_DISBURSAL_DATE<(SELECT CURRENT_DATE FROM DUAL))
ORDER BY LOAN_DISBURSAL_DATE DESC;
/*QS.7 Write a query to find all the customers who took all products (all loan types available) */
SELECT * FROM LMS_CUSTOMER_M_16911 cust JOIN (SELECT LESSEE_ID
FROM LMS_AGREEMENT_DTL_16911 A JOIN LMS_PRODUCT_M_16911 pro
ON pro.PRODUCT_CODE = A.PRODUCT_CODE WHERE pro.PRODUCT_CATEGORY
=ALL(SELECT CATEGORY_ID FROM LMS_PRODUCT_CATEGORY_M_16911)
GROUP BY A.LESSEE_ID) ON cust.CUSTOMER_ID=LESSEE_ID;
 
/* QS.8 Write a query to fetch those loans where loan amount exceeds everyone’s credit limit */
SELECT *FROM LMS_AGREEMENT_DTL_16911 WHERE LOAN_AMOUNT>ALL(
SELECT Monthly_Income*12*0.30 FROM LMS_CUSTOMER_M_16911 ); 

/* QS.9 Write a query to fetch those customers whose monthly expenses are greater than average
monthly expenses of all customers */ 
SELECT * FROM LMS_CUSTOMER_M_16911;
SELECT *FROM LMS_CUSTOMER_M_16911 WHERE TOTAL_MONTHLY_INCOME>(
SELECT AVG(TOTAL_MONTHLY_INCOME) FROM LMS_CUSTOMER_M_16911 );
 
/* QS.10 Write a query to find out those customers who have paid the least penalty charges on the 
installments */

SELECT * FROM LMS_CUSTOMER_M_16911 WHERE CUSTOMER_ID=(SELECT
LESSEE_ID FROM( SELECT A.LESSEE_ID LESSEE_ID,SUM(repay.PENALTY_CHARGES)
PENALSUM FROM LMS_AGREEMENT_DTL_16911 A JOIN 
LMS_REPAYSCH_DTL_16911 repay ON repay.AGREEMENT_ID=A.AGREEMENT_ID
GROUP BY A.LESSEE_ID) WHERE PENALSUM=(SELECT MIN(PENALSUM) FROM(
SELECT SUM(repay.PENALTY_CHARGES) PENALSUM FROM 
LMS_AGREEMENT_DTL_16911 A JOIN LMS_REPAYSCH_DTL_16911 repay
ON repay.AGREEMENT_ID=A.AGREEMENT_ID GROUP BY A.LESSEE_ID )));
 
--Views 
/* QS.1 Create a view on LMS_CHEQUE_DTL table based on Cheque_num, deposit_date, 
cheque_amount, payment_mode and status. Change the column names to ‘Cheque 
Number’, ‘Date’, ‘Amount’, and ‘Mode’ respectively. Name the view as ChequeDetails_VU. */

CREATE VIEW ChequeDetails_V16911 AS
SELECT  CHEQUE_NUM "CHEQUE NUMBER"  ,DEPOSIT_DATE "DATE",
 CHEQUE_AMOUNT AMOUNT,  PAYMENT_MODE "MODE", STATUS 
FROM  LMS_CHEQUE_DTL_16911;
 
-- QS.2  Confirm that the view works. Display only the Cheque number and Date from the above view
SELECT "CHEQUE NUMBER","DATE" FROM ChequeDetails_V16911;
 
/* QS.3 Create a view which take care of all the Loan Agreements of HOME LOAN Type only. Name 
the view as HOME_LOAN_VU. Confirm that the view works */

CREATE VIEW HOME_LOAN_V16911 AS SELECT  * FROM
 LMS_AGREEMENT_DTL_16911  WHERE AGREEMENT_ID=ANY(
 SELECT A.AGREEMENT_ID  FROM LMS_AGREEMENT_DTL_16911 A
 JOIN LMS_PRODUCT_M_16911 pro  ON A.PRODUCT_CODE=pro.PRODUCT_CODE
 WHERE pro.PRODUCT_NAME LIKE '%HOME');
 
/* QS.4 Create a view which displays all the Loans being taken by the Customers. The view contains 
Customer Name, Product Name, Loan Amount, Disbursal Date and instalment amount. 
Customer name should contain both First name and last name */
CREATE VIEW HOME_LOAN_VU_16911_2 AS  SELECT 
 cust.FIRST_NAME||' '||cust.LAST_NAME "CUSTOMER NAME",  pro.PRODUCT_NAME 
"PRODUCT NAME", A.LOAN_AMOUNT "LOAN_AMOUNT",  A.LOAN_DISBURSAL_DATE 
"DISBURSAL DATE",  repay.INSTALLMENT_AMOUNT "INSTALLMENT_AMOUNT"
 FROM LMS_AGREEMENT_DTL_16911 A  JOIN LMS_PRODUCT_M_16911 pro
 ON A.PRODUCT_CODE=pro.PRODUCT_CODE  JOIN LMS_CUSTOMER_M_16911 cust
 ON A.LESSEE_ID=cust.CUSTOMER_ID  JOIN LMS_REPAYSCH_DTL_16911 repay
 ON repay.AGREEMENT_ID=A.AGREEMENT_ID ;
 
-- QS.5 Confirm that the view works

SELECT DISTINCT * FROM HOME_LOAN_VU_16911_2;

/* QS.6 Create a view based on Customer name and count of all the loans being taken by the 
Customer whose repayment frequency is Monthly. */

CREATE VIEW HOME_LOAN_VU_16911_3 AS SELECT 
cust.FIRST_NAME||' '||cust.LAST_NAME "CUSTOMER NAME", "ALL CUSTOMER LOANS" FROM LMS_CUSTOMER_M_16911 cust JOIN
( SELECT LESSEE_ID, COUNT(AGREEMENT_ID) "ALL CUSTOMER LOANS"
FROM LMS_AGREEMENT_DTL_16911 WHERE REPAYMENT_FREQUENCY='M'
GROUP BY LESSEE_ID) sq ON cust.CUSTOMER_ID = sq.LESSEE_ID;
 
-- QS.7 Confirm that the view works

SELECT * FROM HOME_LOAN_VU_16911_3;

-- QS.8 Create a view based on Product Name, sum of total pending instalments sorted descending.

CREATE VIEW HOME_LOAN_VU_16911_4 AS  SELECT pro.PRODUCT_NAME,
SUM(repay.INSTALLMENT_AMOUNT) "TOTAL PENDING INSTALLMENTS " FROM
LMS_PRODUCT_M_16911 pro JOIN LMS_AGREEMENT_DTL_16911 A
ON pro.PRODUCT_CODE = A.PRODUCT_CODE JOIN LMS_REPAYSCH_DTL_16911 repay
ON repay.AGREEMENT_ID=A.AGREEMENT_ID WHERE INSTALLMENT_DUE_DATE<(SELECT CURRENT_DATE FROM DUAL) 
GROUP BY PRODUCT_NAME ORDER BY "TOTAL PENDING INSTALLMENTS " DESC;

/*QS.9 Create a view based on Customer Name, Gender, Contact number, Profession, Monthly 
income and monthly expense. */

CREATE VIEW HOME_LOAN_V16911_5 AS SELECT FIRST_NAME||' '||LAST_NAME "CUSTOMER NAME", GENDER, CONTACT_NUMBER,
PROFESSION , MONTHLY_INCOME INCOME, TOTAL_MONTHLY_INCOME "MONTHLY EXPENSE" FROM LMS_CUSTOMER_M_16911; 

-- QS.10 Check whether the above view is updatable or not. If not, why?

UPDATE VIEW HOME_LOAN_V16911_6 AS SELECT  
FIRST_NAME||' '||LAST_NAME "CUSTOMER NAME", GENDER "GENDER IS",
CONTACT_NUMBER "PHONE NUMBER", PROFESSION "WORK PROFESSION",
MONTHLY_INCOME INCOME, TOTAL_MONTHLY_INCOME "MONTHLY EXPENSE"
FROM LMS_CUSTOMER_M_16911;

-- THE_ABOVE VIEW IS NOT UPDATABLE, MEANS WE CANNOT UPDATE OR MODIFY THE ABOVE VIEWS,
-- BECAUSE, 

